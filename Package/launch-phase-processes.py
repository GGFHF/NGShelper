#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#-------------------------------------------------------------------------------

'''
This software has been developed by:

    GI Sistemas Naturales e Historia Forestal (formerly known as GI Genetica, Fisiologia e Historia Forestal)
    Dpto. Sistemas y Recursos Naturales
    ETSI Montes, Forestal y del Medio Natural
    Universidad Politecnica de Madrid
    https://github.com/ggfhf/

Licence: GNU General Public Licence Version 3.
'''

#-------------------------------------------------------------------------------

'''
Description: This program launches several PHASE processes with a input file list.
'''

#-------------------------------------------------------------------------------

import argparse
import gzip
import pathlib
import os
from re import X
import sys

import xlib

#-------------------------------------------------------------------------------

def main(argv):
    '''
    Main line of the program.
    '''

    # check the operating system
    xlib.check_os()

    # check the WSL installation
    if sys.platform.startswith('win32'):
        command = 'whoami'
        rc = xlib.run_command(command, xlib.DevNull(), is_script=False)
        if rc == 0:
            pass
        else:
            print('*** ERROR: The WSL 2 is not installed.')
            sys.exit(1)

    # get and check the arguments
    parser = build_parser()
    args = parser.parse_args()
    check_args(args)

    # launch PHASE processes with a input file list
    launch_phase_processes(args.phase_dir, args.processes_number, args.input_dir, args.output_dir)

#-------------------------------------------------------------------------------

def build_parser():
    '''
    Build the parser with the available arguments.
    '''

    # create the parser and add arguments
    description = 'Description: This program renames the files generated by vcf2phase.py using the variant file yielded by query-data2scenarioX.py.'
    text = f'{xlib.get_project_name()} v{xlib.get_project_version()} - {os.path.basename(__file__)}\n\n{description}\n'
    usage = f'\r{text.ljust(len("usage:"))}\nUsage: {os.path.basename(__file__)} arguments'
    parser = argparse.ArgumentParser(usage=usage)
    parser._optionals.title = 'Arguments'
    parser.add_argument('--phasedir', dest='phase_dir', help='Path of the directoty of the PHASE application installation (mandatory).')
    parser.add_argument('--processes', dest='processes_number', help=f'Number of process to be launched; default: {xlib.Const.DEFAULT_PROCESSES_NUMBER}.')
    parser.add_argument('--indir', dest='input_dir', help='Path of the directoty where the PHASE application input files are located (mandatory).')
    parser.add_argument('--outdir', dest='output_dir', help='Path of the directoty where the PHASE application output files are generated (mandatory).')
    parser.add_argument('--verbose', dest='verbose', help=f'Additional job status info during the run: {xlib.get_verbose_code_list_text()}; default: {xlib.Const.DEFAULT_VERBOSE}.')
    parser.add_argument('--trace', dest='trace', help=f'Additional info useful to the developer team: {xlib.get_trace_code_list_text()}; default: {xlib.Const.DEFAULT_TRACE}.')

    # return the paser
    return parser

#-------------------------------------------------------------------------------

def check_args(args):
    '''
    Check the input arguments.
    '''

    # initialize the control variable
    OK = True

    # check "phase_dir"
    if args.phase_dir is None:
        xlib.Message.print('error', '*** The directoty of the PHASE application installation is not indicated in the input arguments.')
        OK = False
    elif not os.path.isdir(args.phase_dir):
        xlib.Message.print('error', f'*** The directory {args.phase_dir} does not exist.')
        OK = False

    # check "processes_number"
    if args.processes_number is None:
        args.processes_number = xlib.Const.DEFAULT_PROCESSES_NUMBER
    elif not xlib.check_int(args.processes_number, minimum=1):
        xlib.Message.print('error', 'The processes number has to be a integer number greater than or equal to 1.')
        OK = False
    else: 
        args.processes_number = int(args.processes_number)

    # check "input_dir"
    if args.input_dir is None:
        xlib.Message.print('error', '*** The directoty where the PHASE application input files are located is not indicated in the input arguments.')
        OK = False
    elif not os.path.isdir(args.input_dir):
        xlib.Message.print('error', f'*** The directory {args.input_dir} does not exist.')
        OK = False

    # check "output_dir"
    if args.output_dir is None:
        xlib.Message.print('error', '*** The directoty where the PHASE application output files are generated is not indicated in the input arguments.')
        OK = False
    elif not os.path.isdir(args.output_dir):
        xlib.Message.print('error', f'*** The directory {args.output_dir} does not exist.')
        OK = False

    # check "verbose"
    if args.verbose is None:
        args.verbose = xlib.Const.DEFAULT_VERBOSE
    elif not xlib.check_code(args.verbose, xlib.get_verbose_code_list(), case_sensitive=False):
        xlib.Message.print('error', f'*** verbose has to be {xlib.get_verbose_code_list_text()}.')
        OK = False
    if args.verbose.upper() == 'Y':
        xlib.Message.set_verbose_status(True)

    # check "trace"
    if args.trace is None:
        args.trace = xlib.Const.DEFAULT_TRACE
    elif not xlib.check_code(args.trace, xlib.get_trace_code_list(), case_sensitive=False):
        xlib.Message.print('error', f'*** trace has to be {xlib.get_trace_code_list_text()}.')
        OK = False
    if args.trace.upper() == 'Y':
        xlib.Message.set_trace_status(True)

    # if there are errors, exit with exception
    if not OK:
        raise xlib.ProgramException('', 'P001')

#-------------------------------------------------------------------------------

def launch_phase_processes(phase_dir, processes_number, input_dir, output_dir):
    '''
    '''

    # initialize the counter of rename files
    input_file_counter = 0

    # build the input file list
    input_file_list = []
    for path in pathlib.Path(input_dir).iterdir():
        if path.is_file():

            # add 1 to the counter of rename files
            input_file_counter += 1

            # add path to the input file list
            input_file_list.append(path)

            # print the counter of renamed files
            xlib.Message.print('verbose', f'\rInput files: {input_file_counter}')
    xlib.Message.print('verbose', '\n')

    # set the files number list
    files_number_list = []
    file_number = input_file_counter // processes_number
    remainder = input_file_counter % processes_number
    for i in range(processes_number):
        if i < remainder:
            files_number_list.append(file_number + 1)
        else:
            files_number_list.append(file_number)
    xlib.Message.print('info', f'files_number_list: {files_number_list}')

    # build the path file with input files of each process
    input_files_list_file_list = []
    for i in range(processes_number):
        input_files_list_file_list.append(f'{output_dir}{os.sep}input_file_list_{i}.txt')

    # write input files corrrespondig to each process
    start = 0
    for i in range(processes_number):
        try:
            input_files_list_file_id = open(input_files_list_file_list[i], mode='w', encoding='iso-8859-1', newline='\n')
        except Exception as e:
            raise xlib.ProgramException(e, 'F003', input_files_list_file_list[i])
        end = start + files_number_list[i]
        for j in range(start, end):
            input_files_list_file_id.write(f'{input_file_list[j]}\n')
        input_files_list_file_id.close()
        start = end 

    # create scripts of PHASE processes
    for i in range(processes_number):
        pass

    # launch PHASE processes
    for i in range(processes_number):
        pass

#-------------------------------------------------------------------------------

def build_phase_process_script(phase_dir, i, input_files_list_file, output_dir):
    '''
    '''

    pass

#-------------------------------------------------------------------------------

if __name__ == '__main__':

    main(sys.argv[1:])
    sys.exit(0)

#-------------------------------------------------------------------------------
