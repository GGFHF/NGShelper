#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=broad-except
# pylint: disable=invalid-name
# pylint: disable=line-too-long
# pylint: disable=multiple-statements
# pylint: disable=too-many-lines

#-------------------------------------------------------------------------------

'''
This program filters transcripts according to their length, FPKM and TPM calculated by DETONATE.

This software has been developed by:

    GI en Desarrollo de Especies y Comunidades Le√±osas (WooSp)
    Dpto. Sistemas y Recursos Naturales
    ETSI Montes, Forestal y del Medio Natural
    Universidad Politecnica de Madrid
    https://github.com/ggfhf/

Licence: GNU General Public Licence Version 3.
'''

#-------------------------------------------------------------------------------

import argparse
import gzip
import os
import re
import sys

import xlib

#-------------------------------------------------------------------------------

def main():
    '''
    Main line of the program.
    '''

    # check the operating system
    xlib.check_os()

    # get and check the arguments
    parser = build_parser()
    args = parser.parse_args()
    check_args(args)

    # filter transcripts
    filter_transcripts(args.assembly_software_code, args.transcriptome_file, args.score_file, args.output_file, args.minlen, args.maxlen, args.minFPKM, args.minTPM)

#-------------------------------------------------------------------------------

def build_parser():
    '''
    Build the parser with the available arguments.
    '''

    # create the parser and add arguments
    description = 'Description: This program filters transcripts according to their length, FPKM and TPM calculated by DETONATE.'
    text = f'{xlib.get_project_name()} v{xlib.get_project_version()} - {os.path.basename(__file__)}\n\n{description}\n'
    usage = f'\r{text.ljust(len("usage:"))}\nUsage: {os.path.basename(__file__)} arguments'
    parser = argparse.ArgumentParser(usage=usage)
    parser.add_argument('--assembler', dest='assembly_software_code', help=f'{xlib.Const.AS_TRINITY_CODE} (Trinity) or {xlib.Const.AS_SOAPDENOVOTRANS_CODE} (SOAPdenovo-Trans).')
    parser.add_argument('--transcriptome', dest='transcriptome_file', help='Path of a transcriptome file in FASTA format generated by Trinity.')
    parser.add_argument('--score', dest='score_file', help='Path of a score file where DETONATE saved the score of the transcriptome file.')
    parser.add_argument('--output', dest='output_file', help='Path of a output file where filtered transcripts will be saved.')
    parser.add_argument('--minlen', dest='minlen', help=f'Transcript with length values less than this value will be filtered (default: {xlib.Const.DEFAULT_MINLEN}).')
    parser.add_argument('--maxlen', dest='maxlen', help=f'Transcript with length values greater than this value will be filtered (default: {xlib.Const.DEFAULT_MAXLEN}).')
    parser.add_argument('--minFPKM', dest='minFPKM', help=f'Transcript with FPKM values less than this value will be filtered (default: {xlib.Const.DEFAULT_MINFPKM}).')
    parser.add_argument('--minTPM', dest='minTPM', help=f'Transcript with TPM values less than this value will be filtered (default: {xlib.Const.DEFAULT_MINTPM}).')
    parser.add_argument('--verbose', dest='verbose', help=f'Additional job status info during the run: {xlib.get_verbose_code_list_text()}; default: {xlib.Const.DEFAULT_VERBOSE}.')
    parser.add_argument('--trace', dest='trace', help=f'Additional info useful to the developer team: {xlib.get_trace_code_list_text()}; default: {xlib.Const.DEFAULT_TRACE}.')

    # return the paser
    return parser

#-------------------------------------------------------------------------------

def check_args(args):
    '''
    Verity the input arguments data.
    '''

    # initialize the control variable
    OK = True

    # check the assembly_software_code value
    if args.assembly_software_code is None:
        xlib.Message.print('error', '*** The assembly software that generated the transcritpme file is not indicated in the input arguments.')
        OK = False
    elif args.assembly_software_code not in [xlib.Const.AS_TRINITY_CODE, xlib.Const.AS_SOAPDENOVOTRANS_CODE, xlib.Const.AS_GENERATED_BY_NGSCLOUD]:
        xlib.Message.print('error', f'*** {args.assembly_software_code} is not a valid code of assembly software.')
        OK = False

    # check the transcriptome_file value
    if args.transcriptome_file is None:
        xlib.Message.print('error', '*** A transcritpme file in Fasta format is not indicated in the input arguments.')
        OK = False
    elif not os.path.isfile(args.transcriptome_file):
        xlib.Message.print('error', f'*** The file {args.transcriptome_file} does not exist.')
        OK = False

    # check the score_file value
    if args.score_file is None:
        xlib.Message.print('error', '*** A score file where RSEM-EVAL (DETONATE package) saved the score of the transcriptome file is not indicated in the input arguments.')
        OK = False
    elif not os.path.isfile(args.score_file):
        xlib.Message.print('error', f'*** The file {args.score_file} does not exist.')
        OK = False

    # check the output_file value
    if args.output_file is None:
        xlib.Message.print('error', '*** A output file where filtered transcripts will be saved is not indicated in the input arguments.')
        OK = False
    else:
        try:
            if not os.path.exists(os.path.dirname(args.output_file)):
                os.makedirs(os.path.dirname(args.output_file))
        except Exception:
            xlib.Message.print('error', f'*** The directory {os.path.dirname(args.output_file)} of the file {args.output_file} is not valid.')
            OK = False

    # check the minlen value
    if args.minlen is None:
        args.minlen = xlib.Const.DEFAULT_MINLEN
    elif not xlib.check_int(args.minlen, minimum=1):
        xlib.Message.print('error', '*** The minlen has to be a integer number greater than 0.')
        OK = False
    else:
        args.minlen = int(args.minlen)

    # check the maxlen value
    if args.maxlen is None:
        args.maxlen = xlib.Const.DEFAULT_MAXLEN
    elif not xlib.check_int(args.maxlen, minimum=1):
        xlib.Message.print('error', '*** The maxlen has to be a integer number greater than 0.')
        OK = False
    else:
        args.maxlen = int(args.maxlen)

    # check the minFPKM value
    if args.minFPKM is None:
        args.minFPKM = xlib.Const.DEFAULT_MINFPKM
    elif not xlib.check_float(args.minFPKM, minimum=0.0):
        print('*** FPKM has to be a float number greater than or equal to 0.0.')
        OK = False
    else:
        args.minFPKM = float(args.minFPKM)

    # check the minTPM value
    if args.minTPM is None:
        args.minTPM = xlib.Const.DEFAULT_MINTPM
    elif not xlib.check_float(args.minTPM, minimum=0.0):
        print('*** FPKM has to be a float number greater than or equal to 0.0.')
        OK = False
    else:
        args.minTPM = float(args.minTPM)

    # check "verbose"
    if args.verbose is None:
        args.verbose = xlib.Const.DEFAULT_VERBOSE
    elif not xlib.check_code(args.verbose, xlib.get_verbose_code_list(), case_sensitive=False):
        xlib.Message.print('error', f'*** verbose has to be {xlib.get_verbose_code_list_text()}.')
        OK = False
    if args.verbose.upper() == 'Y':
        xlib.Message.set_verbose_status(True)

    # check "trace"
    if args.trace is None:
        args.trace = xlib.Const.DEFAULT_TRACE
    elif not xlib.check_code(args.trace, xlib.get_trace_code_list(), case_sensitive=False):
        xlib.Message.print('error', f'*** trace has to be {xlib.get_trace_code_list_text()}.')
        OK = False
    if args.trace.upper() == 'Y':
        xlib.Message.set_trace_status(True)

    # check if maxlen value is greater or equal than minlen value
    if OK:
        if args.maxlen < args.minlen:
            xlib.Message.print('error', '*** The maxlen value has to be greater than or equal to minlen.')
            OK = False

    # if there are errors, exit with exception
    if not OK:
        raise xlib.ProgramException('', 'P001')

#-------------------------------------------------------------------------------

def filter_transcripts(assembly_software_code, transcriptome_file, score_file, output_file, minlen, maxlen, minFPKM, minTPM):
    '''
    Filter transcripts according to their length, FPKM and TPM.
    '''

    # initialize the transcripts dictionary
    transcripts_dict = {}

    # open the score file
    if score_file.endswith('.gz'):
        try:
            score_file_id = gzip.open(score_file, mode='rt', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F002', score_file)
    else:
        try:
            score_file_id = open(score_file, mode='r', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F001', score_file)

    # read the first record of score file and find out lenght, and FPKM and TMP positions
    score_record = score_file_id.readline()
    data_list = score_record.split('\t')
    transcript_id_position = -1
    length_position = -1
    FPKM_position = -1
    TPM_position = -1
    i = 0
    for datum in data_list:
        if datum.strip().upper().startswith('TRANSCRIPT_ID'):
            transcript_id_position = i
        if datum.strip().upper() == 'LENGTH':
            length_position = i
        elif datum.strip().upper() == 'FPKM':
            FPKM_position = i
        elif datum.strip().upper() == 'TPM':
            TPM_position = i
        i += 1
    if transcript_id_position == -1 or length_position == -1 or FPKM_position == -1 or TPM_position == -1:
        raise xlib.ProgramException('', 'L015')

    # while there are records in score file, save theirs transcript id, lenght, FPKM and TPM
    score_record = score_file_id.readline()
    while score_record != '':
        data_list = score_record.split('\t')
        transcript_id = data_list[transcript_id_position].upper()
        try:
            length = float(data_list[length_position])
            (integer_part, decimal_part) = divmod(length, 1)
            if decimal_part > 0:
                raise xlib.ProgramException('', 'D002', data_list[length_position], 'length')
            else:
                length = int(integer_part)
        except Exception as e:
            raise xlib.ProgramException(e,  'D002', data_list[length_position], 'length')
        try:
            FPKM = float(data_list[FPKM_position])
        except Exception as e:
            raise xlib.ProgramException(e,  'D003', data_list[FPKM_position], 'FPKM')
        try:
            TPM = float(data_list[TPM_position])
        except Exception as e:
            raise xlib.ProgramException(e, data_list[TPM_position], 'TPM')
        transcripts_dict[transcript_id] = {'length': length, 'FPKM': FPKM, 'TPM': TPM}
        score_record = score_file_id.readline()

    # close score file
    score_file_id.close()

    # open the transcriptome file
    if transcriptome_file.endswith('.gz'):
        try:
            tanscriptome_file_id = gzip.open(transcriptome_file, mode='rt', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F002', transcriptome_file)
    else:
        try:
            tanscriptome_file_id = open(transcriptome_file, mode='r', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F001', transcriptome_file)

    # open the ouput file
    if output_file.endswith('.gz'):
        try:
            output_file_id = gzip.open(output_file, mode='wt', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F002', output_file)
    else:
        try:
            output_file_id = open(output_file, mode='w', encoding='iso-8859-1')
        except Exception as e:
            raise xlib.ProgramException(e, 'F001', output_file)

    ## initialize the count of transcripts and saved transcripts
    transcripts_count = 0
    saved_transcripts_count = 0

    # set the pattern of the head records (>transcriptome_info)
    pattern = r'^>(.*)$'

    # read the first record of transcriptome file
    tanscriptome_record = tanscriptome_file_id.readline()

    # while there are records in transcriptome file
    while tanscriptome_record != '':

        # process the head record
        if tanscriptome_record.startswith('>'):

            # extract the data
            mo = re.search(pattern, tanscriptome_record)
            transcript_info = mo.group(1)

            # check the origin
            if assembly_software_code == xlib.Const.AS_TRINITY_CODE and transcript_info[:7].upper() != 'TRINITY':
                raise xlib.ProgramException('', 'F007', tanscriptome_record)

            # get the transcript id
            transcript_id = transcript_info.split(' ')[0].upper()

            # initialize the transcript sequence
            transcript_seq = ''

            # read the next record
            tanscriptome_record = tanscriptome_file_id.readline()

        else:

            # control the FASTA format
            raise xlib.ProgramException('', 'F006', transcriptome_file, 'FASTA')

        # while there are records and they are sequence
        while tanscriptome_record != '' and not tanscriptome_record.startswith('>'):

            # concatenate the record to the transcript sequence
            transcript_seq += tanscriptome_record.strip()

            # read the next record of transcriptome file
            tanscriptome_record = tanscriptome_file_id.readline()

        # add 1 to trascriptomes count
        transcripts_count += 1

        # write the transcriptome_record in the output built if its length is between the minimum and maximum length, and FPKM and TPM are greater or equal to arguments values
        length = transcripts_dict.get(transcript_id, {}).get('length', 0)
        FPKM = transcripts_dict.get(transcript_id, {}).get('FPKM', 0)
        TPM = transcripts_dict.get(transcript_id, {}).get('TPM', 0)
        if length >= minlen and  length <= maxlen and FPKM >= minFPKM and TPM >= minTPM:
            try:
                output_file_id.write(f'>{transcript_info}\n')
                output_file_id.write(f'{transcript_seq}\n')
            except Exception as e:
                raise xlib.ProgramException(e, 'F001', output_file)
            # add 1 to save trascripts count
            saved_transcripts_count += 1

        # print the counters
        xlib.Message.print('verbose', f'\rTranscripts processed ... {transcripts_count:9d} - Transcripts saved ... {saved_transcripts_count:9d}')

    xlib.Message.print('verbose', '\n')

    # close transcriptome and output files
    tanscriptome_file_id.close()
    output_file_id.close()

    # print OK message
    print(f'\nThe file {os.path.basename(output_file)} containing the transcripts selected is created.')

#-------------------------------------------------------------------------------

if __name__ == '__main__':

    main()
    sys.exit(0)

#-------------------------------------------------------------------------------
